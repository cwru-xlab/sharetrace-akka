akka {
  log-dead-letters = off
}

sharetrace {
  runner {
    type = ""
  }

  context {
    seed = any
    random-generator = org.apache.commons.math3.random.Well44497a
    reference-time = now
    user-time = system
    logged = [
      sharetrace.logging.event.user.ContactEvent
      sharetrace.logging.event.user.ReceiveEvent
      sharetrace.logging.event.user.UpdateEvent
      sharetrace.logging.event.user.LastEvent
      sharetrace.logging.event.lifecycle.CreateUsersStart
      sharetrace.logging.event.lifecycle.CreateUsersEnd
      sharetrace.logging.event.lifecycle.SendContactsStart
      sharetrace.logging.event.lifecycle.SendContactsEnd
      sharetrace.logging.event.lifecycle.SendRiskScoresStart
      sharetrace.logging.event.lifecycle.SendRiskScoresEnd
      sharetrace.logging.event.lifecycle.RiskPropagationStart
      sharetrace.logging.event.lifecycle.RiskPropagationEnd
      sharetrace.logging.ExecutionProperties
    ]
  }

  parameters {
    transmission-rate = 0.8
    send-coefficient = 1.0
    tolerance = 0.0
    time-buffer = 2 days
    score-expiry = 14 days
    contact-expiry = 14 days
    flush-timeout = 1 second
    idle-timeout = 30 seconds
  }

  monitor.dispatcher {
    type = PinnedDispatcher
    executor = thread-pool-executor
    thread-pool-executor.allow-core-timeout = off
  }

  user.dispatcher {
    type = Dispatcher
    executor = thread-pool-executor
    throughput = 100
    thread-pool-executor {
      max-pool-size-max = 2147483647 // Integer.MAX_VALUE
    }
  }

  analysis.handlers = [
    sharetrace.analysis.handler.EventTimeline
    sharetrace.analysis.handler.GraphHandler
    sharetrace.analysis.handler.Reachability
    sharetrace.analysis.handler.Runtimes
    sharetrace.analysis.handler.UserEventCounts
    sharetrace.analysis.handler.UserUpdates
  ]
}