package org.sharetrace.data.sampling;

import java.util.Random;
import org.apache.commons.math3.distribution.RealDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.immutables.value.Value;
import org.sharetrace.data.factory.RandomGeneratorFactory;

abstract class BaseSampler<T> implements Sampler<T> {

  protected static float normalizedSample(RealDistribution distribution) {
    double max = Math.min(Double.MAX_VALUE, distribution.getSupportUpperBound());
    double min = Math.max(Double.MIN_VALUE, distribution.getSupportLowerBound());
    double sample = Math.max(Double.MIN_VALUE, Math.min(Double.MAX_VALUE, distribution.sample()));
    return (float) ((sample - min) / (max - min));
  }

  /** Returns a pseudo-random number generator with a seed generated by {@link #seed()}. */
  @Value.Derived
  protected RandomGenerator randomGenerator() {
    return randomGeneratorFactory().getGenerator(seed());
  }

  /** Returns a factory that uses {@link #seed()} to produce {@link RandomGenerator} instances. */
  @Value.Default
  protected RandomGeneratorFactory randomGeneratorFactory() {
    return Well44497a::new;
  }

  /** Returns a seed for {@link #randomGenerator()} to create a pseudo-random number generator. */
  @Value.Default
  protected long seed() {
    return new Random().nextLong();
  }
}
